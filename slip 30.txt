class Queue
{
String[] data = new String[10];
int front, rear;
Queue()
{ 
 front=rear=0;
 }
public synchronized void addQ(String greeting)
{
data[rear]=greeting; rear++;
}
public synchronized String removeQ()
 {
 String greeting=data[front];front++;
 return greeting;
}
}
class Producer extends Thread
{
 String greeting;Queue q; int count;
Producer (String greeting,Queue q,int count)
{
this.greeting=greeting;
this.q=q;
this.count=count;
}
 public void run()
 {
try
{
 for(int i=1;i<=count;i++)
 {
 q.addQ(greeting + i);
 Thread.sleep(2000);
 }
}
 catch(InterruptedException ie)
 {
 }
 }
}
class Consumer extends Thread
{
Queue q; int count;
Consumer (Queue q, int count)
{
 this.q=q;this.count=count;
}
public void run()
{
try{
for(int i=0;i<count;i++)
{
 System.out.println(q.removeQ());
 Thread.sleep(3000);
 } 
} 
catch(InterruptedException ie)
 {
 } 
 }
}
class Thread8ProdConsumer
{
public static void main(String[] args)
{
Queue q = new Queue();
Producer p1=new Producer("Hello",q,3);
Consumer c1=new Consumer(q,6);
p1.start();
c1.start();
}
}
/*
[root@ugilinux81 ~]# javac RaceDemo.java
[root@ugilinux81 ~]# java RaceDemo
Hello1
Hello2
Hello3
null
null
null
[root@ugilinux81 ~]#
*/
















import java.sql.*;
import java.util.*;

class Main {
	public static void main(String args[]) {
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		int ch;
		Scanner s = new Scanner(System.in);
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/student", "root", "student");
			stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			rs = stmt.executeQuery("select * from teacher");
			int count = 0;
			while (rs.next())
				count++;
			System.out.println("Total Records are = " + count);
			do {
				System.out.println("1 First. 2 Last. 3 Next. 4 Prev. 5. Exit");
				ch = s.nextInt();
				switch (ch) {
				case 1:
					rs.first();
					System.out.println("TId :" + rs.getInt(1) + " TName :" + rs.getString(2) + " TSalary : " + rs.getString(3));
					break;
				case 2:
					rs.last();
					System.out.println("Roll :" + rs.getInt(1) + " Name :" + rs.getString(2) + " TSalary : " + rs.getString(3));
					break;
				case 3:
					rs.next();
					if (rs.isAfterLast())
						System.out.println("Can't move forword");
					else
						System.out.println("Roll :" + rs.getInt(1) + " Name :" + rs.getString(2) + " TSalary : " + rs.getString(3));
					break;
				case 4:
					rs.previous();
					if (rs.isBeforeFirst())
						System.out.println("Can't move backword");
					else
						System.out.println("Roll :" + rs.getInt(1) + " Name :" + rs.getString(2) + " TSalary : " + rs.getString(3));
					break;
				case 5:
					break;
				default:
					System.out.println("Enter valid operation");
				}
			} while (ch != 5);
		}
		catch (Exception e) {
			System.out.println(e);
		}
	}
}